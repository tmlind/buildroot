#!/bin/sh

stock_fw="etc/firmware/ti-connectivity"
kernel_version=$(uname -r)
stock_kernel_partitions="mmcblk1p17 mmcblk1p19 mmcblk1p22 mmcblk1p23 mmcblk1p25 
mmcblk0p1 mmcblk1p20"
stock_wlan_modules="lib80211 cfg80211 mac80211 wl12xx wl12xx_sdio"
stock_wlan_modules_loaded=""
pds_partitions="mmcblk1p5 mmcblk1p7"
mac=""

#
# Note that this does not consider the calibration data right now
#
read_mac() {
	tmp=$(mktemp -d)

	for partition in ${pds_partitions}; do
		if mount -o ro /dev/${partition} /${tmp}; then
			echo "Mounted ${partition} as pds"
			break
		fi
	done

	if [ ! -f ${tmp}/wifi/nvs_map.bin ]; then
		echo "Could not find nvs_map.bin"
		umount ${tmp}
		return
	fi

	bytes=$(hexdump -C ${tmp}/wifi/nvs_map.bin | head -n1 | \
			cut -d' ' -f6,7,8,9,14,15)

	for byte in ${bytes}; do
		if [ "${mac}" == "" ]; then
			mac=${byte}
		else
			mac=${byte}:${mac}
		fi
	done

	echo "Read WLAN MAC from nvs_map.bin: ${mac}"

	echo "Copying nvs_map.bin to /lib/firmware/ti-connectivity/"
	cp ${tmp}/wifi/nvs_map.bin /lib/firmware/ti-connectivity/

	umount ${tmp}
}

load_stock_wlan_modules() {
	fw=$1
	mods=$2

	if [ ! -d ${fw} ]; then
		return
	fi

	if ! cp ${fw}/wl1271-nvs.bin ${fw}/wl128x-fw-multirole-*.bin \
			/lib/firmware/ti-connectivity/; then
		return
	fi

	for module in ${stock_wlan_modules}; do
		mod=${mods}/${module}.ko

		if [ ! -f ${mod} ]; then
			return
		fi

		if ! insmod ${mods}/${module}.ko; then
			return
		fi
	done

	stock_wlan_modules_loaded=1
}

# Let's assume the stock kernel firmware and modules are saved at:
# lib/firmware/3.0.8-stock
# lib/modules/3.0.8-stock
find_and_load_stock_kernel_modules() {
	tmp=$(mktemp -d)
	fw="${tmp}/lib/firmware/3.0.8-stock"
	mod="${tmp}/lib/modules/3.0.8-stock"

	for partition in ${stock_kernel_partitions}; do
		if mount /dev/${partition} ${tmp}; then
			# See if we have saved "3.0.8-stock" files
			load_stock_wlan_modules ${fw} ${mod}
			# Also check stock kernel default location
			load_stock_wlan_modules \
				${tmp}/etc/firmware/ti-connectivity \
				${tmp}/lib/modules
			umount ${tmp}
			if [ "${stock_wlan_modules_loaded}" != "" ]; then
			    echo "Loaded stock WLAN fw and modules ${partition}"
				break
			fi
		fi
	done
}

#
# Needs proc and sys mounted, /etc/init.d/networking will
# take care of the rest.
#
start_wlan() {
	retries=120
	errors=0

	if [ ! -f /etc/wpa_supplicant.conf ]; then
		echo "No /etc/wpa_supplicant.conf, not starting WLAN"
		return
	fi

	if echo ${kernel_version} | grep -q "3.0.8-"; then
		mount -t tmpfs none /var/run
		mount -t tmpfs none /lib/firmware
		mkdir -p /lib/firmware/ti-connectivity

		find_and_load_stock_kernel_modules
	fi

	read_mac
	if [ "${mac}" != "" ]; then
		ifconfig wlan0 down
		ifconfig wlan0 hw ether ${mac}
	fi

	wpa_supplicant -iwlan0 -c /etc/wpa_supplicant.conf > /var/run/wpa_supplicant 2>&1 &

	# prevent udhcpc from timing out before wpa_supplicant is done
	while [ "${retries}" -gt "0" ]; do
		if ! grep "wlan0: Associated with" /var/run/wpa_supplicant; then
			retries=$((retries - 1))
			echo "waiting max ${retries}s more to associate with access point.."
			new_err=$(grep -c CONN_FAILED /var/run/wpa_supplicant)
			if [ "${new_err}" != "${errors}" ]; then
				echo "Restarting wpa_supplicant.."
				killall wpa_supplicant
				cat /var/run/wpa_supplicant
				wpa_supplicant -iwlan0 -c /etc/wpa_supplicant.conf > \
					       /var/run/wpa_supplicant 2>&1 &
				errors=${new_err}
			fi
			sleep 1
		else
			return
		fi
	done

	echo "WLAN could not connect:"
	cat /var/run/wpa_supplicant
}

case "$1" in
  start)
	echo "Loading droid4 stock kernel WLAN modules..."
	start_wlan
	;;
  stop)
        ;;
  restart|reload)
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?
